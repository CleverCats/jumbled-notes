#include<iostream>
using namespace std;
class Animal
{
public:
	virtual void speak() //虚函数 virtual(虚)，这是在编译时编译器就不能确定函数的调用了
	{
		cout << "动物在说话" << endl;
	}
};
class Dog :public Animal
{
public:
	void speak()  //重写父类虚函数
	{
		cout << "小狗在说话" << endl;
	}
};
class Cat:public Animal        /*静态多态：函数重载和运算符重载属于静态多态,复用函数名
	                                      地址为早绑定，在编译阶段就确定了函数地址*/
{
public:
	void speak()    //重写父类虚函数
	{
		cout << "小猫在说话" << endl;
	}
};
void call(Animal &kind) /*动态多态满足条件：1.有继承关系
							 2.子类需要重写（完全相同）父类的虚函数,virtual可以不加	
						动态多态的使用： 1.父类的指针或引用 执行子类对象*/
{											
	kind.speak();
}
int main()
{
	Dog dog;
//如果不采用动态多态,那么地址将早绑定
	//如果将Dog类对象传入Anlimal引用，如果想调用狗的speak函数,那么必须让函数地址
	 //在调用时绑定，而不是提前早绑定，这时就需要将基类的函数加上virtual变为虚函数
	call(dog);
	system("PAUSE");
	return 0;
}

