#include<iostream>
#include<string>
using namespace std;
// 实现计算机抽象类
class AbstractCalculator
{
public:        
	virtual int Retresult()   /*多态计算机好处： 1.组织结构清晰
		                                         2.可读性强
												 3.对于前期或者后期维护性高
												   对扩展实行开放，对修改实行关闭*/
							//普通实现需要重头查看修改，不方便
											  
	{
		return 0;
	}
	int m_num1;
	int m_num2;
};
//加法
class Add:public AbstractCalculator
{
public:
	int Retresult()
	{
		return m_num1 + m_num2;
	}
};
//减法
class Subt :public AbstractCalculator
{
public:
	int Retresult()
	{
		return m_num1 - m_num2;
	}
};
//乘法
class Multi :public AbstractCalculator
{
public:
	int Retresult()
	{
		return m_num1 * m_num2;
	}
};
//除法
class Div :public AbstractCalculator
{
public:
	int Retresult()
	{
		return m_num1 / m_num2;
	}
};
void DoCall()
{
	//加法
	AbstractCalculator * m_P = new Add;
	m_P->m_num1 = 100;
	m_P->m_num2 = 200;
	cout << m_P->m_num1 << "+" << m_P->m_num2 <<"=" <<m_P->Retresult()<<endl;
	delete m_P;
	//减法
	m_P = new Subt;
	m_P->m_num1 = 100;
	m_P->m_num2 = 200;
	cout << m_P->m_num1 << "-" << m_P->m_num2 << "=" << m_P->Retresult()<< endl;
	delete m_P;
	//乘法
	m_P = new Multi;
	m_P->m_num1 = 100;
	m_P->m_num2 = 200;
	cout << m_P->m_num1 << "*" << m_P->m_num2 << "=" << m_P->Retresult() << endl;
	delete m_P;
	//除法
	m_P = new Div;
	m_P->m_num1 = 100;
	m_P->m_num2 = 200;
	cout << m_P->m_num1 << "/" << m_P->m_num2 << "=" << m_P->Retresult() << endl;
	delete m_P;
}
int main()
{
	DoCall();
	system("PAUSE");
	return 0;
}