#include<iostream>
using namespace std;
void Call();
class fun
{
public:
	fun()
	{
		cout << "\t无参(默认)构造函数被调用"<<endl;
	}
	fun(int a)
	{
		age = a;  //将传入的实参值赋予函数调用者的age属性
		cout << "\t有参构造函数被调用" << endl;
	}
	~fun()
	{
		cout << "\t析构函数被调用" << endl;
	}
	fun(const fun&p)  //拷贝函数
	{
		age = p.age;   //将传入对象的属性拷贝到调用该函数的对象的身上
		cout << "\t拷贝函数被调用,拷贝成功" << endl;
	}
public:
	int age;
};
int main()
{
	Call();   //调用子函数 调用结束后栈区局部变量被自动销毁
	system("pause");
	return 0;
}
void Call()   //调用方法
{	                                        //1.括号法

	cout << "              \t1.括号法"<<endl;

	fun A;system("pause");  //无参调用 注:可以写成fun（A）但不可以写成fun A( )这会被系统当成一个函数的声明

	fun B(16); system("pause");//有参调用

	fun C(B);                 //拷贝函数调用
	cout << "B的年龄=" << B.age << endl; 
	cout << "C的年龄=" << C.age << endl;
	system("pause"); 
	                                         //2.显示法

	cout << "              \t2.显示法" << endl;

	fun D; system("pause");  //无参调用 同括号法

	fun E = fun(17); system("pause"); //有参调用

	           //fun(10)为匿名对象，有参无名，单独拿出来时可正常执行后但执行后系统会立即回收
	           //fun E = fun(10)等同于将匿名对象的姓名赋为E 同等于fun E(10)

	fun F = fun(E);    //拷贝函数调用
	cout << "E的年龄=" << E.age << endl;
	cout << "F的年龄=" << F.age << endl;
	system("pause");
	                                        //3.隐式转换法
	cout << "              \t2.隐式转换法" << endl;

	fun G; system("pause");  //无参调用 同括号法

	fun H = 18; system("pause"); //有参调用 相当于 fun H = fun(18) 或 fun H(18)

	fun I = H; //拷贝函数调用 相当于 fun I = fun(E) 或 fun I(E)
	cout << "H的年龄=" << H.age << endl;
	cout << "I的年龄=" << I.age << endl;
	system("pause");
}