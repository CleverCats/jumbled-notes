#include<iostream>
#include<string>
using namespace std;
class animal   /*当delete父类的指针时，由于子类的析构函数与父类的析构函数构成多态，
	          所以得先调动子类的析构函数；之所以再调动父类的析构函数*/
{
public:
	animal()
	{
		cout << "animal的构造函数被调用" << endl;
	}
	/*virtual~animal()  //虚析构
	{
		cout << "animal的析构函数被调用" << endl;
	}*/
	 virtual ~animal()=0; //为纯虚析构,但需要在类外中补充执行内容,执行内容可以为空,但必须有
	                    //***与虚析构的区别,声明纯虚析构后,该类变为抽象类不能实例化对象***
	virtual void speak() = 0;
};
animal::~animal()
{
	cout << "animal的析构函数被调用" << endl; //类外实现纯析虚构的执行内容
}
class cat :public animal
{
public:
	cat(string name)
	{
		cout << "cat的构造函数被调用" << endl;
		p_name = new string(name); //在子类堆区开辟内存
	} 
	void speak() 
	{
		cout << *this->p_name << "小猫在说话" << endl;
	}
	 ~cat()
	{
		cout << "cat的析构函数被调用" << endl;
		if (p_name != NULL)      //释放并置空子类中在堆区开辟的内存
		{
			delete p_name;
			p_name = NULL;
		}
	}
public:
	string *p_name;
};
void dospeak()
{
	animal*m_p = new cat("tom");
	m_p->speak();
	system("pause");
	//父类指针delete时不会调用子类的析构,只会调用父类的,如果子类在堆区开辟空间,那么就得不到释放
	                             //出现内存泄漏
	delete m_p;
	
}
int main()
{
	dospeak();
	system("pause");
	return 0;
}


