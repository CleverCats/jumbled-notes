#include<iostream>
#include<string>
#include<cstdlib>
#define Max 100
using namespace std;
void menu()           //通讯录菜单
{
	cout << "                         ***********通讯录***********" << endl;
	cout << "                         ********1.添加联系人********" << endl;
	cout << "                         ********2.删除联系人********" << endl;
	cout << "                         ********3.修改联系人********" << endl;
	cout << "	                 ********4.查询联系人********" << endl;
	cout << "                         ******5.显示通讯录名单******" << endl;
	cout << "                         ********6.清空通讯录********" << endl;
	cout << "                         ********0.退出通讯录********" << endl;
};
struct Personinformation  //自定义个人信息结构体
{

	string name; string sex; int age; long int number;
	//姓名     性别      年龄      电话     
};
struct PersonList   //定义通讯录人员名单结构体类型
{
	int Ubound;//当前数组人员上限
	Personinformation PersonList1[Max];  //定义个人信息数组变量
};
void addpersons(PersonList* per, int Ubound)                   //添加联系人（传址才能改变实参）
{
	string name; string sex; int age; long int number;
	if (Ubound < Max)
	{
		cout << "姓名:"; cin >> name;//输入姓名
		per->PersonList1[per->Ubound].name = name; //姓名添加
		cout << "性别:" << endl
			<< "1.―男 2.―女" << endl << "选择:";
		int m;   //性别选择
		while (1)
		{
			cin >> m;
			switch (m)
			{
			case 1:per->PersonList1[per->Ubound].sex = "男"; break;
			case 2:per->PersonList1[per->Ubound].sex = "女"; break;
			default:cout << "输入有误，请重新输入" << endl;
			}
			if (m == 1 || m == 2) break; 
		}
		cout << "年龄:"; cin >> age;
		per->PersonList1[per->Ubound].age = age;   //年龄填写
		cout << "电话:"; cin >> number;
		per->PersonList1[per->Ubound].number= number;  //电话填写
		cout << "添加成功!" << endl;
		per->Ubound++;
	}
	else
	{
		cout << "通讯录数据达到上限！" << endl; system("pause"); return;  //数据达到上限后不进行添加
	}
};
int Addperson(PersonList* per, int Ubound)       //查询是否存在用户
{
	string addname;
	cout << "需要删除的者的姓名:"; cin >> addname;
	for (int i = 0; i < Ubound; i++)
	{
		if (addname == per->PersonList1[i].name)   //查找到数据
		{
			for (; i < Ubound; i++)
			{
				per->PersonList1[i] = per->PersonList1[i + 1]; //整体位移覆盖  达到删除效果
			}
			per->Ubound--;
			return 1;  //查到后返回值 1
		}
	}
	return -1;  //未查到返回值-1
};
int SearchPerson(PersonList* per, int Ubound)      //查询是否存在用户
{
	string Searchname;
	cout << "操作对象的姓名:"; cin >> Searchname;
	for (int i = 0; i < Ubound; i++)
	{
		if (Searchname == per->PersonList1[i].name)   //查找到数据
			return i;  //查到后返回下标值
	}
	return -1;  //未查到返回值
};
int main()
{
	int select = 0;		//用户选择
	struct PersonList newperson;    //创建结构体变量
	newperson.Ubound = 0;   //初始化当前通讯录数组人员数量
	while (1)
	{
		menu();			//打印菜单
		cout << "请选择:";
		cin >> select;  //输入选择
		switch (select)
		{
		case 0:cout << "程序退出" << endl; system("pause"); return 0;  //退出程序
		case 1:addpersons(&newperson, newperson.Ubound); break;  //添加新成员（调用添加函数）
		case 2:
		{
			int j = Addperson(&newperson, newperson.Ubound);
			if (j == 1) cout << "数据已删除" << endl;
			else cout << "数据不存在" << endl;
			break;
		}
		case 3:
		{
			string name; string sex; int age; long int number;
			int ret = SearchPerson(&newperson, newperson.Ubound);         //查询返回下标值
			if (ret != -1)
			{
				cout << "开始填写修改信息" << endl; cout << "姓名: "; cin >> name;
				newperson.PersonList1[ret].name = name;                   //修改信息
				cout << "性别: "; cin >> sex;
				newperson.PersonList1[ret].sex = sex;
				cout << "年龄: "; cin >> age;
				newperson.PersonList1[ret].age = age;
				cout << "电话: "; cin >> number;
				newperson.PersonList1[ret].number = number;
				cout << "修改成功" << endl;
			}
			else cout << "查无此人" << endl;
			break;
		}
		case 4: 
		{
			int ret = SearchPerson(&newperson, newperson.Ubound);         //查询返回下标值
			if (ret!=-1)
			{
				cout << "姓名: " << newperson.PersonList1[ret].name << "\t";    //打印结果
				cout << "性别: " << newperson.PersonList1[ret].sex << "\t";
				cout << "年龄: " <<newperson.PersonList1[ret].age << "\t";
				cout << "电话: " <<newperson.PersonList1[ret].number << endl;
			}
			else cout << "查无此人" << endl;
			break;
		}
		case 5:
		{
			if (newperson.Ubound == 0) cout << "数据为空" << endl;
			else
			{
				for (int i = 0; i < newperson.Ubound; i++)
				{
					cout << "姓名: " << newperson.PersonList1[i].name << "\t";
					cout << "性别 " << newperson.PersonList1[i].sex << "\t";
					cout << "年龄: " << newperson.PersonList1[i].age << "\t";
					cout << "电话: " << newperson.PersonList1[i].number << endl;
				}
			}		break;
		}
		case 6:
			cout << "1.确认清空" << endl
				<< "2.取消" << endl;      //清空数据
			int select; 
			while (1)
			{
				cout << "选择: ";
				cin >> select;
				if (select == 1)
				{
					newperson.Ubound = 0;
					cout << "数据以清空" << endl; break;
				}
				if (select == 2){ cout << "操作取消" << endl; break; }
			}
			
		}
		system("pause");
		system("cls");
	}
}





