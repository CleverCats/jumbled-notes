#include<iostream>
#include<string>
using namespace std;
class Myinteger
{
	friend ostream &operator<<(ostream &cout, Myinteger&p);
public:
	Myinteger(int integ)
	{
		this->m_int = integ;
	}
	//后置递增，后进行++运算
	Myinteger operator++(int)  //Myinteger自定义类
	{
		Myinteger temp=this->m_int;
		this->m_int++;
		return temp;  //返回值
	}
	//前置递增，先进行++运算
	Myinteger& operator++()
	{
		this->m_int++;
		return *this;  //返回引用
	}
private:
	int m_int;
};
ostream &operator<<(ostream &cout, Myinteger&p)
{
	cout << p.m_int;
	return cout;
}

int main()
{
	Myinteger m_A = 0;
	cout << m_A << endl;
	cout << m_A.operator++() << endl;
	//cout << ++m_A << endl;
	cout << m_A.operator++(5) << endl;
	/*后置版本接受一个额外的参数（不被使用）int类型的参数（必须是int类型的）
	当我们使用后置运算符时，编译器为这个形参提供一个值为0的实参。
	尽管从语法上说后置函数可以使用这个额外的形参，但在实际过程中通常不会这样做。
	这个形参的唯一作用就是区分前置和后置版本的函数，而不是真的要在实现后置版本是参与运算。
	因为前置和后置版本的递增或者递减函数原型必须加以一个特殊的区分，c++语言选择增加一个占位参数实现后置版本。*/
	cout << m_A++ << endl;
	cout << m_A << endl;
	system("PAUSE");
	return 0;
}