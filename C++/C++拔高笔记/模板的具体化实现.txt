							/*使模板可以比较两个自定义数据类型的属性的方法
                                  1.重载运算符,比如重载==运算符进行属性对比
								  2.采用模板的具体化实现

			模板的局限性:1.当数组参数传入时,或者自定义数据类型参数传入,模板不能直接对其操作,需要采用模板具体化实现方法*/
#include<iostream>               
using namespace std;
class Person
{
public:
	Person(int age, string name)
	{
		this->m_age = age; this->m_name = name;
	}
	//bool operator==(Person m_p)            //方法一:运算符重载
	//{
	//	if (this->m_age = m_p.m_age&&this->m_name == m_p.m_name)
	//	{
	//		return true;
	//	}
	//	else
	//	{
	//		return false;
	//	}
	//}
public:
	int m_age;
	string m_name;
};
template < class T >
bool Compare(T m, T n)
{
	if (m == n)
	{
		return true;
	}
	else
	{
		return false;
	}

}
template<>bool Compare(Person m, Person n)  //方法二:模板的具体化实现,当有Person类被识别传入,调用该实现函数
// //添加template<>是具体化模板实现的重载
{
	if (m.m_name==n.m_name && m.m_age==n.m_age)
	{
		return true;
	}
	else
	{
		return false;
	}
}
void test()
{
	int a = 10; int b = 20;
	if (Compare(a, b))
	{
		cout << "A和B相同" << endl;
	}
	else
	{
		cout << "A和B不相同" << endl;
	}
	Person A(17, "玛丽");  //实例化对象
	Person B(17, "玛丽");
	if (Compare(A, B))
	{
		cout << "两人相同" << endl;
	}
	else
	{
		cout << "两人不同" << endl;
	}

}
int main()
{
	test();
	system("PAUSE");
	return 0;
}