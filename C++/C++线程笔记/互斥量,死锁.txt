#include<iostream>
#include<vector>
#include<list>
#include<thread>
#include<mutex>  //互斥量  
using namespace std;
class msgQueue  //消息队列
{
public:
	void MsgRecvQueue()
	{
		for (int i = 0; i < 100000; ++i)
		{
			m_tex.lock();     //锁1锁住住   若其它程序调用锁1的lock()需要等待解锁
			m_tex2.lock(); //锁2锁住     若其它程序调用锁2下的lock()需要等待解锁
			//std::lock_guard<std::mutex>Autolock(m_tex);   //实例化一个lock_guard<mutex>的模板对象 并用m_tex 互斥量对象初始化

			/*lock_guard<mutex>模板对象在构造时会执行构造函数类的lock() 函数 ,在该对象被释放时,该对象会调用析构函数里的 unlock()函数
			  从而达到了自动锁与解锁     ****该函数中每次执行一次for循环就会执行一次构造,在当前循环结束析构该栈对象,达到自动锁与解锁的目的***
			    ****如果想要提前解锁而不是执行完当前的for语句后才解锁 可以使用*/
				/*{
						std::lock_guard<std::mutex>Autolock(m_tex); 
						msgMyQueue.push_back(i);
				}*/
				/*｛ ｝内为一个作用域,当离开该作用域，AutoLock将会析构 注意:建议适用于锁后语句较长的情况
				*/
			msgMyQueue.push_back(i);   //消息队列接收消息
			m_tex.unlock();  //解锁1
			m_tex2.unlock();  //解锁2
			cout << "msgQueue接收到消息" << i << endl;
		}
	}
	void MsgOutQueue()
	{
		for (int i = 0; i < 100000; ++i)
		{
			if (!msgMyQueue.empty())
			{
				int Recv = msgMyQueue.front();   //读取队列顶层消息
				m_tex2.lock(); //锁2锁住,继续执行锁下的代码   若其它程序调用锁2的lock()的函数需要等待解锁
				m_tex.lock();   //锁1锁住,继续执行锁下的代码   若其它程序调用锁1的lock()的函数需要等待解锁
				msgMyQueue.pop_front();  //清理掉消息
				m_tex.unlock();  //解锁1
				m_tex2.unlock();  //解锁2
				//消息处理.....
				//...
				cout << "msgQueue读取到许处理消息" << Recv << endl;
			}
			else
			{
				cout << "MsgOutQueue执行,但消息队列元素" << i << "为空" << endl;
			}
			cout << "MsgEnd" << endl;
		}
	}
private:
	std::list<int>msgMyQueue;  //消息队列链表 list的优点,高效插入和删除

	//创建一把锁(互斥量的对象)  对象不能同时使用锁即 Obeject.lock(); 多锁的使用必只有一方成功执行lock(),其它等待Object.unlock()解锁后争夺锁的权限
	mutex m_tex;  
	mutex m_tex2;   //死锁需要两把锁
	/*死锁:  当线程1调用锁1  lock() 接着即将调用锁2 lock()时 突然切换到线程2 线程2调用了锁2 的lock() 然后即将调用锁1的 lock() 此时双方都在等待对方解锁
			 但因为都无法执行到下面的 unlock() 解锁，导致发生死锁 代码不在继续运行*/
	/*解决:  只要保证两把锁(互斥量)的上锁顺序一致，就不会发生死锁*/

	/*std::lock()函数模版（用来处理多个互斥量）  
				特点：	一次性能锁住多个个锁  不能等于1 当锁住多个锁的过程中发现当前需要锁住的锁已经被锁住了,那么他将会立刻将已经锁住的锁解锁
						然后不断重新尝试是否能一次性锁住所有锁,所以std::lock()函数模板使用不会发生死锁现象*/
	/*
	方法:
	｛
		std::lock(锁1,锁2);  锁1.unlock; 锁2.lock;  //与分别 锁1.lock(); 锁2.lock(); 相比较 有发生锁死时自动解锁功能

		可以用std::guard<mutex>Obiect(锁1,std::adopt_lock)；代替 锁1.lock();  在栈中的局部变量Object被析构时自动调用析构函数中的  锁.unlock
			  std::guard<mutex>Obiect(锁2,std::adopt_lock)；     锁2.lock(); 

			  //std::adopt_lock是一个结构体对象,起一个标记作用,如果 互斥量的锁已经锁上了,那么不执行构造函数中的 锁.lock()函数
 						//使用std::adopt_lock必须在 锁.lock()的前提下
	｝*/
	
};
int main()
{
	msgQueue myMsg;
						  //多线程同时访问共享数据  同时读写需要谁用谁锁,用完解锁
	std::thread myInMsg(&msgQueue::MsgRecvQueue, &myMsg);  //消息接收
	std::thread myOutMsg(&msgQueue::MsgOutQueue, &myMsg);  //消息处理  （类成员函数地址,类对象,（若有构造函数）构造参数1,构造参数2,.....）

	myInMsg.join(); 
	myOutMsg.join();
	
	//vector<thread>m_thread;
	//for (int i = 0; i < 10; i++)
	//{
	//	m_thread.push_back(thread(MyPrint,i));
	//}
	//for (/*vector<thread>::iterator*/ auto iter = m_thread.begin(); iter != m_thread.end();iter++)
	//{
	//	iter->join();  //等待10个线程都返回
	//}
	cout << "主线程结束了" << endl;	
	//system("pause");
	return 0;
}