#include<iostream>
using namespace std;
#include<thread>
class Talk
{
public:
	void operator()()
	{
		cout << "我的线程 operator()开始执行" << endl;
		cout << "我的线程 operator()结束执行" << endl;
	}
};
//void MyThread()
//{
//	cout << "MySonThreadStart1" << endl;
//	cout << "MySonThreadStart2" << endl;
//	cout << "MySonThreadStart3" << endl;
//	cout << "MySonThreadStart4" << endl;
//	cout << "MySonThreadStart5" << endl;
//}
int main()
{
	//MyThread可调用对象
	//thread SonThread(MyThread);    //创建了线程,线程执行入口MyThread（），MyThread线程开始执行
	//if (SonThread.joinable())  //判断是否可以用join(),或者detach()
	//{
	//	cout << "Joinable=true" << endl;
	//}
	//else
	//{
	//	cout << "Joinabel=false" << endl;
	//}
	//SonThread.join();  //主线程阻塞到该处,等待子线程的结束汇合  join汇合
	//SonThread.detach();   //主线程与子线程分离 各走各的,但同样主线程结束后所以进程结束
	/*if (SonThread.joinable())
	{
		cout << "Joinable=true" << endl;
	}
	else
	{
		cout << "Joinabel=false" << endl;
	}*/
	Talk Ta;
	thread myTalk(Ta);   //使用类对象(必须有伪函数)
	myTalk.join();
	//myTalk.detach();
	cout << "I love china1" << endl;
	cout << "I love china2" << endl;
	cout << "I love china3" << endl;
	cout << "I love china4" << endl;
	cout << "I love china5" << endl;
	cout << "I love china6" << endl;
	system("PAUSE");
}