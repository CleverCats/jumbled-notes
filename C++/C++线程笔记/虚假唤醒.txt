std::mutex my_lock; 
std::condition_variable my_Judge; //实例化一个条件(condition)变量(variable)
std::unique_lock<std::mutex>in_Unique_Lock(my_lock); //保护消息写入,自动调用.lock
my_Judge.wait(out_Unique, [this](){ })  //参数1 :需要关联的对象  参数2: 条件判断表达函数体,以函数体返回值true/false来决定下一步操作


在条件变量 对象即my_Judge的成员函数wait被条件变量的另一个成员函数 notify_one或者notify_all唤醒时,如果需要操作的共享数据为空,那么就成为虚假唤醒,如果对共享数据操作,则会导致系统不正当崩溃
解决方法则是,实现参数(一般为lambda表达式),对共享文件的状态做出正确判断，来防止wait被虚假唤醒后做出不正当操作