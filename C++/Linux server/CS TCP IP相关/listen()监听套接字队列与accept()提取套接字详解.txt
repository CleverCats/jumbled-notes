listen()函数调用格式:【此函数仅服务端调用】
int listen(int sockfd,int backlog); 补充:sockfd这个套接字称【监听套接字】
参数1:要监听的套接字
参数2:曾经的意义:如果已完成连接队列项 + 未完成连接队列项 = backlog ,后续客户端TCP连接的第一次握手请求发送的SYN包就会被忽略不会回应
      客户端过一会会再次发送SYN包【大概重复发送三次】,都没有回应的会,连接就会失败
    
      现在的意义:已完成连接队列项  = backlog ,后续客户端TCP连接的第一次握手请求发送的SYN包就会被忽略不会回应
      客户端过一会会再次发送SYN包【大概重复发送三次】,都没有回应的会,连接就会失败

原因:为了阻止【拒绝服务攻击】DOS 【分布式拒绝服务攻击】DDOS(多台机子对服务器进行syn攻击,多个DOS攻击就是DDOS)
     DOS 原理:因为老的backlog的特性导致如果伪装虚拟的IP/PORT对服务器不断发送syn包,不断进行第一次握手,
	      而且因为是虚拟IP根据TCP三次握手连接的特性是不会成功进行后续的握手就是说只会达到半连接状态
              导致未完成连接队列的项累积暴增,连接队列项达到backlog限定数导致后续正常TCP连接被拒绝服务;

补充:其实这个改动并不能真正阻止syn攻击【DOS/DDOS】，
     当未完成连接队列项达到一定数量后也会阻止正常TCP连接的请求,虽然操作系统会对未完成连接队列项进行定时清理,但比较杯水车薪
     但不管怎样,写代码时,要尽快调用accept函数将已完成连接队列项的客户端取出来
-------------------------------------------------------------------------------------------------
监听套接字队列:

在监听套接字sockfd时,操作系统会给这个套接字维护两个队列:
1.【未完成连接队列】（保存连接状态用）:
首先得知道,三次握手中服务器一共有 【CLOSED】 =》【LISTEN】 =》【SYN_RCVD】=>【ESTABLISHED】这几种状态
调用listen监听套接字后进入 【CLOSED】状态,当接收到第一次握手SYN包后会立刻进入【SYN_RCVD】状态,并发送SYN/ACK进行与客户端的第二次握手
【SYN_RCVD】状态可以看作是正在等待完成第三次握手
		******【SYN_RCVD】状态被称为TCP连接的半连接状态******
处于这种半连接状态的的客户端就会被放在未完成队列中
小结:【未完成连接队列】储存TCP连接处于半连接状态【SYN_RCVD】的客户端
补充:不过如果第三次握手迟迟不来【大概75s】这个未完成项就会被操作系统清理掉

2.【以完成连接队列】（保存连接状态用）:
处于未完成连接队列的客户端其实是服务器正在等待第三次连接,
当客户端接受到服务器的AYN/ACK包后会与发送给客户端ACK包进行第三次握手(补充:客户端connect在此处返回,客户端进入【ESTABLISHED】状态),
服务器收到第三次握手的ACK包后进入【ESTABLISHED】状态然后就会将【未完成连接队列】该以完成连接的客户端放入已完成连接队列

总结:【以完成连接队列】储存TCP以连接状态的【ESTABLISHED】的客户端


RTT:表示未完成队列中任意一项在队列中的存留时间:
由上述分析可知
对于客户端:RTT = 第一次握手 + 第二次握手的时间
	  【客户端第二次握手完后会发送第三次握手包给服务器,但并不会等待服务器收到第三次握手包,而是connect会返回,客户端TCP状态进入ESTABLISHED状态】
对于服务器:RTT = 第二次握手 + 第三次握手时间
	  【第一次握手由客户端发起,服务端被动接收到第一次握手包后（也就是服务器发送第二次握手包给客户端开始）开始计算RTT时间,直到完成与客户端的第三次握手请求】

补充:成功建立TCP连接时长(较快情况),大概【187毫秒】能够完成,这个时间其实很慢,所以建立TCP连接的成本挺高
注意:1s = 1000ms但不是说你1s只能建立6、7个TCP连接,实际上连接是并发的,1000个连接请求同时进行连接,并发进行,全部连接成功也可能花不到1s

accept（）函数:

作用:从已完成连接队列的队首【对头】取出一项【每一项都是完成了三次握手TCP连接(每一项都是一个套接字)】,返回给进程【其实返回的就是客户端的套接字（socket）】
     如果没有已完成连接队列是空的,那么accept()会一直卡在这里【休眠】等待,一直到已完成连接队列有一项时才会被唤醒
     所以,从编程角度来看,要尽快用accept()把已完成连接队列的数据取走,
     当客户端认为于服务器建立连接后可能会立即发送数据但是如果accept没有调用accept取出已完成连接项,那么这个数据就会被保存在套接字的接收缓存区中
    【在TCP状态转换图笔记关于RST标记相关记录中有解释】:每一个TCP连接,系统都会开辟出一个收缓存区和发送缓存区来处理数据的收和发
     当accept()获取这个客户端的套接字后,然后调用read()函数读取套接字的缓存区,数据才会被读取出来
     

补充:【第二次握手后客户端就已经认为与服务器建立连接了连接【ESTABLISHED】,服务器在第三次握手才认为成功建立连接【ESTABLISHED】】


